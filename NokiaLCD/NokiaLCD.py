#!/usr/bin/python

#
# Library to manipulate - Nokia 5110/3310 PCD8544-based LCD display
# by Kabe for SourcExplained
#
# Heavly based on Tony DiCola - Adafruit and Xavier Berger
# https://github.com/adafruit/Adafruit-PCD8544-Nokia-5110-LCD-library
# https://github.com/XavierBerger/pcd8544
#
# Dependencies:
#  - Adafruit_GPIO
#  - Python Image Library

import time

from PIL import Image
import Adafruit_GPIO as GPIO
import Adafruit_GPIO.SPI as SPI

class NokiaLCD(object):
    """Nokia 5110/3310 PCD8544-based LCD display."""
    
    # Screen dimensions in pixel
    Width = 84
    Height = 48

    # Text 
    NRows = 6
    NColumns = 14
    # Alignment
    (AlignRight, AlignCenter, AlignLeft) = (0,1,2)
    
    # Commands
    PCD8544_POWERDOWN = 0x04
    PCD8544_ENTRYMODE = 0x02
    PCD8544_EXTENDEDINSTRUCTION = 0x01
    PCD8544_DISPLAYBLANK = 0x0
    PCD8544_DISPLAYNORMAL = 0x4
    PCD8544_DISPLAYALLON = 0x1
    PCD8544_DISPLAYINVERTED = 0x5
    PCD8544_FUNCTIONSET = 0x20
    PCD8544_DISPLAYCONTROL = 0x08
    PCD8544_SETYADDR = 0x40
    PCD8544_SETXADDR = 0x80
    PCD8544_SETTEMP = 0x04
    PCD8544_SETBIAS = 0x10
    PCD8544_SETVOP = 0x80
    #Control Values
    ROWPIXELS = Height/6

    #default Pins for Sunfounder Raspberry B/B+ Hat
    _SCLK = 17 
    _DIN  = 18
    _DC   = 27
    _RST  = 23
    _CS   = 22

    
    # Font
    FONT = {
      ' ': [0x00, 0x00, 0x00, 0x00, 0x00, 0x00], '!': [0x00, 0x00, 0x5f, 0x00, 0x00, 0x00], '"': [0x00, 0x07, 0x00, 0x07, 0x00, 0x00], '#': [0x14, 0x7f, 0x14, 0x7f, 0x14, 0x00], 
      '$': [0x24, 0x2a, 0x7f, 0x2a, 0x12, 0x00], '%': [0x23, 0x13, 0x08, 0x64, 0x62, 0x00], '&': [0x36, 0x49, 0x55, 0x22, 0x50, 0x00], "'": [0x00, 0x05, 0x03, 0x00, 0x00, 0x00], 
      '(': [0x00, 0x1c, 0x22, 0x41, 0x00, 0x00], ')': [0x00, 0x41, 0x22, 0x1c, 0x00, 0x00], '*': [0x14, 0x08, 0x3e, 0x08, 0x14, 0x00], '+': [0x08, 0x08, 0x3e, 0x08, 0x08, 0x00], 
      ',': [0x00, 0x50, 0x30, 0x00, 0x00, 0x00], '-': [0x08, 0x08, 0x08, 0x08, 0x08, 0x00], '.': [0x00, 0x60, 0x60, 0x00, 0x00, 0x00], '/': [0x20, 0x10, 0x08, 0x04, 0x02, 0x00], 
      '0': [0x3e, 0x51, 0x49, 0x45, 0x3e, 0x00], '1': [0x00, 0x42, 0x7f, 0x40, 0x00, 0x00], '2': [0x42, 0x61, 0x51, 0x49, 0x46, 0x00], '3': [0x21, 0x41, 0x45, 0x4b, 0x31, 0x00],
      '4': [0x18, 0x14, 0x12, 0x7f, 0x10, 0x00], '5': [0x27, 0x45, 0x45, 0x45, 0x39, 0x00], '6': [0x3c, 0x4a, 0x49, 0x49, 0x30, 0x00], '7': [0x01, 0x71, 0x09, 0x05, 0x03, 0x00], 
      '8': [0x36, 0x49, 0x49, 0x49, 0x36, 0x00], '9': [0x06, 0x49, 0x49, 0x29, 0x1e, 0x00], ':': [0x00, 0x36, 0x36, 0x00, 0x00, 0x00], ';': [0x00, 0x56, 0x36, 0x00, 0x00, 0x00], 
      '<': [0x08, 0x14, 0x22, 0x41, 0x00, 0x00], '=': [0x14, 0x14, 0x14, 0x14, 0x14, 0x00], '>': [0x00, 0x41, 0x22, 0x14, 0x08, 0x00], '?': [0x02, 0x01, 0x51, 0x09, 0x06, 0x00], 
      '@': [0x32, 0x49, 0x79, 0x41, 0x3e, 0x00], 'A': [0x7e, 0x11, 0x11, 0x11, 0x7e, 0x00], 'B': [0x7f, 0x49, 0x49, 0x49, 0x36, 0x00], 'C': [0x3e, 0x41, 0x41, 0x41, 0x22, 0x00], 
      'D': [0x7f, 0x41, 0x41, 0x22, 0x1c, 0x00], 'E': [0x7f, 0x49, 0x49, 0x49, 0x41, 0x00], 'F': [0x7f, 0x09, 0x09, 0x09, 0x01, 0x00], 'G': [0x3e, 0x41, 0x49, 0x49, 0x7a, 0x00],
      'H': [0x7f, 0x08, 0x08, 0x08, 0x7f, 0x00], 'I': [0x00, 0x41, 0x7f, 0x41, 0x00, 0x00], 'J': [0x20, 0x40, 0x41, 0x3f, 0x01, 0x00], 'K': [0x7f, 0x08, 0x14, 0x22, 0x41, 0x00], 
      'L': [0x7f, 0x40, 0x40, 0x40, 0x40, 0x00], 'M': [0x7f, 0x02, 0x0c, 0x02, 0x7f, 0x00], 'N': [0x7f, 0x04, 0x08, 0x10, 0x7f, 0x00], 'O': [0x3e, 0x41, 0x41, 0x41, 0x3e, 0x00], 
      'P': [0x7f, 0x09, 0x09, 0x09, 0x06, 0x00], 'Q': [0x3e, 0x41, 0x51, 0x21, 0x5e, 0x00], 'R': [0x7f, 0x09, 0x19, 0x29, 0x46, 0x00], 'S': [0x46, 0x49, 0x49, 0x49, 0x31, 0x00], 
      'T': [0x01, 0x01, 0x7f, 0x01, 0x01, 0x00], 'U': [0x3f, 0x40, 0x40, 0x40, 0x3f, 0x00], 'V': [0x1f, 0x20, 0x40, 0x20, 0x1f, 0x00], 'W': [0x3f, 0x40, 0x38, 0x40, 0x3f, 0x00], 
      'X': [0x63, 0x14, 0x08, 0x14, 0x63, 0x00], 'Y': [0x07, 0x08, 0x70, 0x08, 0x07, 0x00], 'Z': [0x61, 0x51, 0x49, 0x45, 0x43, 0x00], '[': [0x00, 0x7f, 0x41, 0x41, 0x00, 0x00],
      ']': [0x00, 0x41, 0x41, 0x7f, 0x00, 0x00], '^': [0x04, 0x02, 0x01, 0x02, 0x04, 0x00], '_': [0x40, 0x40, 0x40, 0x40, 0x40, 0x00], '`': [0x00, 0x01, 0x02, 0x04, 0x00, 0x00],
      'a': [0x20, 0x54, 0x54, 0x54, 0x78, 0x00], 'b': [0x7f, 0x48, 0x44, 0x44, 0x38, 0x00], 'c': [0x38, 0x44, 0x44, 0x44, 0x20, 0x00], 'd': [0x38, 0x44, 0x44, 0x48, 0x7f, 0x00],
      'e': [0x38, 0x54, 0x54, 0x54, 0x18, 0x00], 'f': [0x08, 0x7e, 0x09, 0x01, 0x02, 0x00], 'g': [0x0c, 0x52, 0x52, 0x52, 0x3e, 0x00], 'h': [0x7f, 0x08, 0x04, 0x04, 0x78, 0x00], 
      'i': [0x00, 0x44, 0x7d, 0x40, 0x00, 0x00], 'j': [0x20, 0x40, 0x44, 0x3d, 0x00, 0x00], 'k': [0x7f, 0x10, 0x28, 0x44, 0x00, 0x00], 'l': [0x00, 0x41, 0x7f, 0x40, 0x00, 0x00], 
      'm': [0x7c, 0x04, 0x18, 0x04, 0x78, 0x00], 'n': [0x7c, 0x08, 0x04, 0x04, 0x78, 0x00], 'o': [0x38, 0x44, 0x44, 0x44, 0x38, 0x00], 'p': [0x7c, 0x14, 0x14, 0x14, 0x08, 0x00], 
      'q': [0x08, 0x14, 0x14, 0x18, 0x7c, 0x00], 'r': [0x7c, 0x08, 0x04, 0x04, 0x08, 0x00], 's': [0x48, 0x54, 0x54, 0x54, 0x20, 0x00], 't': [0x04, 0x3f, 0x44, 0x40, 0x20, 0x00],
      'u': [0x3c, 0x40, 0x40, 0x20, 0x7c, 0x00], 'v': [0x1c, 0x20, 0x40, 0x20, 0x1c, 0x00], 'w': [0x3c, 0x40, 0x30, 0x40, 0x3c, 0x00], 'x': [0x44, 0x28, 0x10, 0x28, 0x44, 0x00], 
      'y': [0x0c, 0x50, 0x50, 0x50, 0x3c, 0x00], 'z': [0x44, 0x64, 0x54, 0x4c, 0x44, 0x00], '{': [0x00, 0x08, 0x36, 0x41, 0x00, 0x00], '|': [0x00, 0x00, 0x7f, 0x00, 0x00, 0x00], 
      '}': [0x00, 0x41, 0x36, 0x08, 0x00, 0x00], '~': [0x10, 0x08, 0x08, 0x10, 0x08, 0x00], '\\':[0x02, 0x04, 0x08, 0x10, 0x20, 0x00], 
      '\x7f': [0x00, 0x7e, 0x42, 0x42, 0x7e, 0x00], }
    
    # Raspberry Pi Logo
    LOGO_RPI = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   # 0x0010 (16) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xF8, 0xFC, 0xAE, 0x0E, 0x0E, 0x06, 0x0E, 0x06,   # 0x0020 (32) pixels
        0xCE, 0x86, 0x8E, 0x0E, 0x0E, 0x1C, 0xB8, 0xF0, 0xF8, 0x78, 0x38, 0x1E, 0x0E, 0x8E, 0x8E, 0xC6,   # 0x0030 (48) pixels
        0x0E, 0x06, 0x0E, 0x06, 0x0E, 0x9E, 0xFE, 0xFC, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   # 0x0040 (64) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   # 0x0050 (80) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   # 0x0060 (96) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x0F, 0xFE,   # 0x0070 (112) pixels
        0xF8, 0xF0, 0x60, 0x60, 0xE0, 0xE1, 0xE3, 0xF7, 0x7E, 0x3E, 0x1E, 0x1F, 0x1F, 0x1F, 0x3E, 0x7E,   # 0x0080 (128) pixels
        0xFB, 0xF3, 0xE1, 0xE0, 0x60, 0x70, 0xF0, 0xF8, 0xBE, 0x1F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00,   # 0x0090 (144) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   # 0x00A0 (160) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   # 0x00B0 (176) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0,   # 0x00C0 (192) pixels
        0xE0, 0xFC, 0xFE, 0xFF, 0xF3, 0x38, 0x38, 0x0C, 0x0E, 0x0F, 0x0F, 0x0F, 0x0E, 0x3C, 0x38, 0xF8,   # 0x00D0 (208) pixels
        0xF8, 0x38, 0x3C, 0x0E, 0x0F, 0x0F, 0x0F, 0x0E, 0x0C, 0x38, 0x38, 0xF3, 0xFF, 0xFF, 0xF8, 0xE0,   # 0x00E0 (224) pixels
        0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   # 0x00F0 (240) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   # 0x0100 (256) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   # 0x0110 (272) pixels
        0x00, 0x7F, 0xFF, 0xE7, 0xC3, 0xC1, 0xE0, 0xFF, 0xFF, 0x78, 0xE0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0,   # 0x0120 (288) pixels
        0x60, 0x78, 0x38, 0x3F, 0x3F, 0x38, 0x38, 0x60, 0x60, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xF8, 0x7F,   # 0x0130 (304) pixels
        0xFF, 0xE0, 0xC1, 0xC3, 0xE7, 0x7F, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   # 0x0140 (320) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   # 0x0150 (336) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   # 0x0160 (352) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x7F, 0xFF, 0xF1, 0xE0, 0xC0, 0x80, 0x01,   # 0x0170 (368) pixels
        0x03, 0x9F, 0xFF, 0xF0, 0xE0, 0xE0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xE0, 0xF0, 0xFF, 0x9F,   # 0x0180 (384) pixels
        0x03, 0x01, 0x80, 0xC0, 0xE0, 0xF1, 0x7F, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   # 0x0190 (400) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   # 0x01A0 (416) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   # 0x01B0 (432) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,   # 0x01C0 (448) pixels
        0x03, 0x03, 0x07, 0x07, 0x0F, 0x1F, 0x1F, 0x3F, 0x3B, 0x71, 0x60, 0x60, 0x60, 0x60, 0x60, 0x71,   # 0x01D0 (464) pixels
        0x3B, 0x1F, 0x0F, 0x0F, 0x0F, 0x07, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   # 0x01E0 (480) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   # 0x01F0 (496) pixels
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ]
    
    def __init__(self, dc = _DC, rst = _RST, sclk=_SCLK, din=_DIN, cs=_CS, gpio=None, spi=None):
        self._sclk = sclk
        self._din = din
        self._dc = dc
        self._cs = cs
        self._rst = rst
        self._gpio = gpio
        self._spi = spi
        # Default to detecting platform GPIO.
        if self._gpio is None:
            self._gpio = GPIO.get_platform_gpio()
        if self._rst is not None:
            self._gpio.setup(self._rst, GPIO.OUT)
        # Default to bit bang SPI.
        if self._spi is None:
            self._spi = SPI.BitBang(self._gpio, self._sclk, self._din, None, self._cs)
        # Set pin outputs.
        self._gpio.setup(self._dc, GPIO.OUT)
        # Initialize buffer with RPi logo.
        self.data(self.LOGO_RPI)
        
    def command(self, c):
        """Send command byte to display."""
        # DC pin low signals command byte.
        self._gpio.set_low(self._dc)
        self._spi.write([c])

    def extended_command(self, c):
        """Send a command in extended mode"""
        # Set extended command mode
        self.command(self.PCD8544_FUNCTIONSET | self.PCD8544_EXTENDEDINSTRUCTION)
        self.command(c)
        # Set normal display mode.
        self.command(self.PCD8544_FUNCTIONSET)
        self.command(self.PCD8544_DISPLAYCONTROL | self.PCD8544_DISPLAYNORMAL)

    def data(self, c, x = 0, y = 0):
        """Send byte of data to display."""
        self.gotoxy(x,y)
        # DC pin high signals data byte.
        self._gpio.set_high(self._dc)
        if type(c) is list:
            self._spi.write(c)
        else:
            self._spi.write([c])

    def data_char(self, char, font=None):
        """Display a single character in the current position of the cursor"""
        try:
            if not font:
                font = self.FONT
            self._gpio.set_high(self._dc)
            if type(char) is list:
                self._spi.write(char)
            else:
                self._spi.write(font[char])

        except KeyError:
            pass # Ignore undefined characters.


    def begin(self, contrast=40, bias=4):
        """Initialize display."""
        self.reset()
        # Set LCD bias.
        self.set_bias(bias)
        self.set_contrast(contrast)
        self.data(self.LOGO_RPI)

    def reset(self):
        """Reset the display"""
        if self._rst is not None:
            # Toggle RST low to reset.
            self._gpio.set_low(self._rst)
            time.sleep(0.1)
            self._gpio.set_high(self._rst)

    def clear(self):
        """Clear contents of image buffer."""
        self.data([0] * (self.Width * self.Height / 8))

    def set_contrast(self, contrast):
        """Set contrast to specified value (should be 0-127)."""
        contrast = max(0, min(contrast, 0x7f)) # Clamp to values 0-0x7f
        self.extended_command(self.PCD8544_SETVOP | contrast)

    def set_bias(self, bias):
        """Set bias"""
        self.extended_command(self.PCD8544_SETBIAS | bias)
        
    def gotoxy(self, x, y):
        """Position the Cursor in a specific x,y position"""
        self.command(self.PCD8544_SETXADDR)
	self.command(self.PCD8544_SETYADDR)

        if ( (0 <= x < self.NColumns) and (0 <= y < self.NRows)):
            self._gpio.set_low(self._dc)
            self._spi.write([x*6+128,y+64])

    def text(self, string, row = None, align = AlignLeft , font=None):
        if row is not None:
            if align == NokiaLCD.AlignRight:
                self.gotoxy(max(self.NColumns - len(string), 0), row)
            elif  align == NokiaLCD.AlignCenter:
                self.gotoxy(max(self.NColumns - len(string), 0) // 2, row)
            else:
                self.gotoxy(0, row)
        for char in string:
            self.data_char(char, font)
    
    def image(self, image):
        """Set buffer to value of Python Imaging Library image.  The image should
        be in 1 bit mode and have a size of 84x48 pixels."""
        if image.mode != '1':
            raise ValueError('Image must be in mode 1.')
        index = 0

        buffer = ([0] * (self.Width * self.Height / 8))

        # Iterate through the 6 y axis rows.
        # Grab all the pixels from the image, faster than getpixel.
        pix = image.load()
        for row in range(6):
            # Iterate through all 83 x axis columns.
            for x in range(84):
                # Set the bits for the column of pixels at the current position.
                bits = 0
                # Don't use range here as it's a bit slow
                for bit in [0, 1, 2, 3, 4, 5, 6, 7]:
                    bits = bits << 1
                    bits |= 1 if pix[(x, row*self.ROWPIXELS+7-bit)] == 0 else 0
                # Update buffer byte and increment to next byte.
                buffer[index] = bits
                index += 1
        self.data(buffer)

    def load_image(self, imagefile):
        """Set buffer based on a image file. Auto-converts to 84x48 pixels and 1 bit mode."""
        image = Image.open(imagefile).resize((self.Width, self.Height), Image.ANTIALIAS).convert('1')
        self.image(image)

   
if __name__ == '__main__':
    # The default pins are NokiaLCD(27, 23, 17, 18, 22)
    # For Sunfounder Raspberry Pi Hat but is valid for other
    # change according to your scheme/specifications
	# disp = NokiaLCD(27, 23, 17, 18, 22)
    disp = NokiaLCD()

    # Initialize library.
    disp.begin(contrast=60)
    time.sleep(.25)

    # Clear display.    
    disp.clear()
    time.sleep(.1)
    # Display Text
    disp.text("This is a test")
    time.sleep(.2)
    disp.text("4 Raspberry Pi")
    time.sleep(.2)	
    disp.text("Nokia PCD8544 ")
    time.sleep(.2)	
    disp.text("Hello", row = 5, align = NokiaLCD.AlignLeft)
    disp.text("World", row = 5, align = NokiaLCD.AlignRight)
    time.sleep(1)	

    # Load Image code is commented because (you must have an image file)
    #disp.load_image('happycat.png')
    #time.sleep(.25)

    # Display Raspberry Pi Logo (using a byte array)
    disp.data(disp.LOGO_RPI)
    time.sleep(.5)

    # position system to write text
    disp.gotoxy(0,4)
    disp.text('By')
    disp.data_char(':') # or single character

    # you can define your own patterns|characters by 
    # passing to data_char arrays of bytes 
    # to maintain character alignment the num bytes should be multiple of 6
    #
    # 0, 0x04 = 00001000
    # 1, 0x08 = 00010000
    # 2, 0x10 = 00100000
    # 3, 0x20 = 01000000
    # 4, 0x10 = 00100000
    # 5, 0x08 = 00010000
    #
    # Note that this will show rotated on screen 

    pattern = [0x04, 0x08, 0x10, 0x20, 0x10, 0x08]
    for i in range(NokiaLCD.NColumns - 3): 
        for j in range(6):
	    disp.data_char([ pattern[j] ])
            time.sleep(.05)	

    disp.gotoxy(0,5)
    disp.text("SourcExplained")




    


